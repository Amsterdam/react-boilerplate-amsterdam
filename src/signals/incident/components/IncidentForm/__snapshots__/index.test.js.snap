// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<IncidentForm /> rendering expect to render correctly 1`] = `
<IncidentForm
  createIncident={[MockFunction]}
  fieldConfig={
    Object {
      "controls": Object {},
    }
  }
  getClassification={[MockFunction]}
  incidentContainer={
    Object {
      "incident": Object {},
    }
  }
  isAuthenticated={false}
  updateIncident={[MockFunction]}
  wizard={Object {}}
>
  <div
    className="incident-form"
  >
    <form
      onSubmit={[Function]}
    >
      <FormGenerator
        fieldConfig={
          Object {
            "controls": Object {},
          }
        }
        onMount={[Function]}
        onUnmount={[Function]}
      >
        <FieldGroup
          control={
            FormGroup {
              "_onDisabledChange": Array [],
              "_pendingChange": false,
              "_pendingDirty": false,
              "_pendingTouched": false,
              "asyncValidator": null,
              "controls": Object {},
              "errors": null,
              "get": [Function],
              "getError": [Function],
              "handleSubmit": [Function],
              "hasError": [Function],
              "meta": Object {
                "createIncident": [MockFunction],
                "form": [Circular],
                "getClassification": [MockFunction],
                "handleSubmit": [Function],
                "incidentContainer": Object {
                  "incident": Object {},
                },
                "updateIncident": [MockFunction],
                "wizard": Object {},
              },
              "patchValue": [Function],
              "pristine": true,
              "reset": [Function],
              "setValue": [Function],
              "stateChanges": Observable {
                "observers": Array [
                  [Function],
                ],
              },
              "status": "VALID",
              "statusChanges": Observable {
                "observers": Array [],
              },
              "submitted": false,
              "touched": false,
              "validator": null,
              "validatorOrOpts": undefined,
              "value": Object {},
              "valueChanges": Observable {
                "observers": Array [],
              },
            }
          }
          key="my_form"
          render={[Function]}
          strict={true}
        >
          <Field
            control={
              FormGroup {
                "_onDisabledChange": Array [],
                "_pendingChange": false,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "asyncValidator": null,
                "controls": Object {},
                "errors": null,
                "get": [Function],
                "getError": [Function],
                "handleSubmit": [Function],
                "hasError": [Function],
                "meta": Object {
                  "createIncident": [MockFunction],
                  "form": [Circular],
                  "getClassification": [MockFunction],
                  "handleSubmit": [Function],
                  "incidentContainer": Object {
                    "incident": Object {},
                  },
                  "updateIncident": [MockFunction],
                  "wizard": Object {},
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [
                    [Function],
                  ],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorOrOpts": undefined,
                "value": Object {},
                "valueChanges": Observable {
                  "observers": Array [],
                },
              }
            }
            render={[Function]}
            strict={true}
          />
        </FieldGroup>
      </FormGenerator>
    </form>
  </div>
</IncidentForm>
`;

exports[`<IncidentForm /> rendering expect to render correctly when form vars have changed 1`] = `
<IncidentForm
  createIncident={[MockFunction]}
  fieldConfig={
    Object {
      "controls": Object {},
    }
  }
  getClassification={[MockFunction]}
  incident={
    Object {
      "extra_boten_geluid_meer": "Ja! Wat een teringzooi hier",
      "extra_personen_overig_vaker": true,
      "phone": "06987654321",
      "priority": "high",
      "subcategory": "(Honden)poep",
    }
  }
  incidentContainer={
    Object {
      "incident": Object {},
    }
  }
  isAuthenticated={false}
  updateIncident={[MockFunction]}
  wizard={Object {}}
>
  <div
    className="incident-form"
  >
    <form
      onSubmit={[Function]}
    >
      <FormGenerator
        fieldConfig={
          Object {
            "controls": Object {},
          }
        }
        onMount={[Function]}
        onUnmount={[Function]}
      >
        <FieldGroup
          control={
            FormGroup {
              "_onDisabledChange": Array [],
              "_pendingChange": false,
              "_pendingDirty": false,
              "_pendingTouched": false,
              "asyncValidator": null,
              "controls": Object {},
              "errors": null,
              "get": [Function],
              "getError": [Function],
              "handleSubmit": [Function],
              "hasError": [Function],
              "meta": Object {
                "createIncident": [MockFunction],
                "form": [Circular],
                "getClassification": [MockFunction],
                "handleSubmit": [Function],
                "incidentContainer": Object {
                  "incident": Object {},
                },
                "updateIncident": [MockFunction],
                "wizard": Object {},
              },
              "patchValue": [Function],
              "pristine": true,
              "reset": [Function],
              "setValue": [Function],
              "stateChanges": Observable {
                "observers": Array [],
              },
              "status": "VALID",
              "statusChanges": Observable {
                "observers": Array [],
              },
              "submitted": false,
              "touched": false,
              "validator": null,
              "validatorOrOpts": undefined,
              "value": Object {},
              "valueChanges": Observable {
                "observers": Array [],
              },
            }
          }
          key="my_form"
          render={[Function]}
          strict={true}
        >
          <Field
            control={
              FormGroup {
                "_onDisabledChange": Array [],
                "_pendingChange": false,
                "_pendingDirty": false,
                "_pendingTouched": false,
                "asyncValidator": null,
                "controls": Object {},
                "errors": null,
                "get": [Function],
                "getError": [Function],
                "handleSubmit": [Function],
                "hasError": [Function],
                "meta": Object {
                  "createIncident": [MockFunction],
                  "form": [Circular],
                  "getClassification": [MockFunction],
                  "handleSubmit": [Function],
                  "incident": Object {},
                  "incidentContainer": Object {
                    "incident": Object {},
                  },
                  "updateIncident": [MockFunction],
                  "wizard": Object {},
                },
                "patchValue": [Function],
                "pristine": true,
                "reset": [Function],
                "setValue": [Function],
                "stateChanges": Observable {
                  "observers": Array [
                    [Function],
                  ],
                },
                "status": "VALID",
                "statusChanges": Observable {
                  "observers": Array [],
                },
                "submitted": false,
                "touched": false,
                "validator": null,
                "validatorOrOpts": undefined,
                "value": Object {},
                "valueChanges": Observable {
                  "observers": Array [],
                },
              }
            }
            render={[Function]}
            strict={true}
          />
        </FieldGroup>
      </FormGenerator>
    </form>
  </div>
</IncidentForm>
`;
